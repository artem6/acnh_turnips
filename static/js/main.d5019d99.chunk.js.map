{"version":3,"sources":["Turnips.module.css","turnipCalculator.ts","Chart.tsx","storageService.ts","Turnips.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","randint","low","high","Math","floor","random","intceil","num","ceil","randfloat","patternNames","pattern0","basePrice","sellPrices","work","hiPhaseLen1","decPhaseLen1","hiPhaseLen2and3","decPhaseLen2","hiPhaseLen3","i","rate","shift","predictPattern0","predictions","metadata","forEach","push","blankPrediction","variation","length","config","minRate","maxRate","pattern1","peakStart","predictPattern1","pattern2","predictPattern2","pattern3","predictPattern3","runPattern","pattern","patternProbability","lastPattern","possiblePatterns","startPrice","patterns","prob","idx","patternsTemp","prediction","dailyPriceRange","probability","type","totalProb","reduce","a","b","expectedPrice","day","expectedPrices","expectedPricesHigh","expectedPricesLow","startDay","expectedMax","expectedHigh","expectedLow","expected","min","max","price","dailyPredictedPrice","Chart","props","d3Container","useRef","margin","width","height","useState","chartElements","setChartElements","useEffect","svg","remove","newSvg","d3","current","attr","append","x","domain","options","xDomain","range","call","tickFormat","xTickFormat","y","yDomain","yTickFormat","title","style","text","data","areas","lines","newAreas","newLines","area","elem","datum","undefined","opacity","d","y0","y1","line","className","ref","memoryStore","USE_LOCAL_STORE","localStorage","getStore","dataStr","getItem","JSON","parse","setStore","value","setItem","stringify","turnipPriceStore","key","expiration","Date","now","clear","storageService","PriceForm","setLastPattern","prices","filter","Boolean","setPrices","changePrice","e","newPrices","parseFloat","target","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","store","onChange","parseInt","patternSelect","map","name","selected","priceTable","formDay","dayName","Turnips","simulated","setSimulated","currentDay","currentPrice","p","charts","round","masterChart","c","chart","unshift","func","deps","id","useDebounceFn","maxTime","allPrices","failedRuns","totalProfit","probabilityMap","startTime","runs","rand","result","attempts","match","thisMatches","knownData","j","gain","simulateFromPrice","histogram","bucketSize","counts","makeHistogram","recommendation","color","App","isLocalhost","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5019d99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"priceTable\":\"Turnips_priceTable__1R06m\",\"formDay\":\"Turnips_formDay__1WR1H\",\"recommendation\":\"Turnips_recommendation__1YEcW\",\"patternSelect\":\"Turnips_patternSelect__1x5LR\"};","// https://gist.github.com/Treeki/85be14d297c80c8b3c0a76375743325b\n\nconst randbool = () => Math.random() > 0.5;\nconst randint = (low: number, high: number) =>\n  Math.floor(Math.random() * (high - low + 1)) + low;\nconst intceil = (num: number) => Math.ceil(num);\nconst randfloat = (low: number, high: number) =>\n  Math.random() * (high - low) + low;\n\ninterface Pattern {\n  dailyPriceRange: { low: number; high: number }[];\n  probability: number;\n  type: number; // 0|1|2|3;\n}\n\nexport const patternNames = [\n  \"Random\",\n  \"Large Spike\",\n  \"Decreasing\",\n  \"Small Spike\",\n  \"Unknown\"\n];\n\n// 0.9 - 1.4 random\nfunction pattern0(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 0: high, decreasing, high, decreasing, high\n  let work = 2;\n\n  const hiPhaseLen1 = randint(0, 6);\n  const decPhaseLen1 = randbool() ? 3 : 2;\n  const hiPhaseLen2and3 = 7 - hiPhaseLen1;\n  const decPhaseLen2 = 5 - decPhaseLen1;\n  const hiPhaseLen3 = randint(0, hiPhaseLen2and3 - 1);\n\n  // high phase 1\n  for (let i = 0; i < hiPhaseLen1; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n\n  // decreasing phase 1\n  let rate = randfloat(0.8, 0.6);\n  for (let i = 0; i < decPhaseLen1; i++) {\n    sellPrices[work++] = intceil(rate * basePrice);\n    rate -= 0.04;\n    rate -= randfloat(0, 0.06);\n  }\n\n  // high phase 2\n  for (let i = 0; i < hiPhaseLen2and3 - hiPhaseLen3; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n\n  // decreasing phase 2\n  rate = randfloat(0.8, 0.6);\n  for (let i = 0; i < decPhaseLen2; i++) {\n    sellPrices[work++] = intceil(rate * basePrice);\n    rate -= 0.04;\n    rate -= randfloat(0, 0.06);\n  }\n\n  // high phase 3\n  for (let i = 0; i < hiPhaseLen3; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern0(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: [number, number][][] = [];\n  let metadata: {\n    decPhaseLen1: number;\n    hiPhaseLen1: number;\n    hiPhaseLen3: number;\n    hiPhaseLen2and3: number;\n    decPhaseLen2: number;\n  }[] = [];\n\n  [0, 1, 2, 3, 4, 5, 6].forEach(hiPhaseLen1 => {\n    [2, 3].forEach(decPhaseLen1 => {\n      [0, 1, 2, 3, 4, 5, 6].forEach(hiPhaseLen3 => {\n        const hiPhaseLen2and3 = 7 - hiPhaseLen1;\n        const decPhaseLen2 = 5 - decPhaseLen1;\n        if (hiPhaseLen3 > hiPhaseLen2and3 - 1) return;\n\n        metadata.push({\n          decPhaseLen1,\n          hiPhaseLen1,\n          hiPhaseLen3,\n          hiPhaseLen2and3,\n          decPhaseLen2\n        });\n        let blankPrediction: typeof predictions[0] = [];\n        for (let i = 0; i < 14; i++)\n          blankPrediction.push([sellPrices[i], sellPrices[i]]);\n        predictions.push(blankPrediction);\n      });\n    });\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n\n    // high phase 1\n    let work = 2;\n    for (let i = 0; i < config.hiPhaseLen1; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n\n    // decreasing phase 1\n    let minRate = 0.6;\n    let maxRate = 0.8;\n    for (let i = 0; i < config.decPhaseLen1; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(minRate * basePrice);\n        predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.04 + 0.06;\n      maxRate -= 0.04;\n      work++;\n    }\n\n    // high phase 2\n    for (let i = 0; i < config.hiPhaseLen2and3 - config.hiPhaseLen3; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n\n    // decreasing phase 2\n    minRate = 0.6;\n    maxRate = 0.8;\n    for (let i = 0; i < config.decPhaseLen2; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(minRate * basePrice);\n        predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.04 + 0.06;\n      maxRate -= 0.04;\n      work++;\n    }\n    // high phase 3\n    for (let i = 0; i < config.hiPhaseLen3; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n  }\n\n  return predictions;\n}\n// 2.0 - 6.0 large spike\nfunction pattern1(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 1: decreasing middle, high spike, random low\n  const peakStart = randint(3, 9);\n  let rate = randfloat(0.9, 0.85);\n  let work = 2;\n  for (; work < peakStart; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, 2.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(2.0, 6.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, 2.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  for (; work < 14; work++) {\n    sellPrices[work] = intceil(randfloat(0.4, 0.9) * basePrice);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern1(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: [number, number][][] = [];\n  let metadata: { peakStart: number }[] = [];\n\n  [3, 4, 5, 6, 7, 8, 9].forEach(peakStart => {\n    metadata.push({ peakStart });\n    let blankPrediction: typeof predictions[0] = [];\n    for (let i = 0; i < 14; i++)\n      blankPrediction.push([sellPrices[i], sellPrices[i]]);\n    predictions.push(blankPrediction);\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n    let minRate = 0.85;\n    let maxRate = 0.9;\n    let work = 2;\n    for (; work < config.peakStart; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(minRate * basePrice);\n        predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.03 + 0.02;\n      maxRate -= 0.03;\n    }\n\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation][work][1] = Math.ceil(2.0 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(2.0 * basePrice);\n      predictions[variation][work][1] = Math.ceil(6.0 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation][work][1] = Math.ceil(2.0 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n\n    for (; work < 14; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(0.4 * basePrice);\n        predictions[variation][work][1] = Math.ceil(0.9 * basePrice);\n      }\n    }\n  }\n\n  return predictions;\n}\n// 0.9 - 0.3 decreasing\nfunction pattern2(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 2: consistently decreasing\n  let rate = 0.9;\n  rate -= randfloat(0, 0.05);\n  for (let work = 2; work < 14; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern2(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: [number, number][][] = [];\n\n  let blankPrediction: typeof predictions[0] = [];\n  for (let i = 0; i < 14; i++)\n    blankPrediction.push([sellPrices[i], sellPrices[i]]);\n  predictions.push(blankPrediction);\n\n  let minRate = 0.9;\n  let maxRate = 0.9;\n\n  minRate -= 0.05;\n  maxRate -= 0;\n  for (let work = 2; work < 14; work++) {\n    for (let variation = 0; variation < predictions.length; variation++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(minRate * basePrice);\n        predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n      }\n    }\n    minRate -= 0.03 + 0.02;\n    maxRate -= 0.03;\n  }\n  return predictions;\n}\n// 1.4 - 2.0 small spike\nfunction pattern3(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 3: decreasing, spike, decreasing\n  const peakStart = randint(2, 9);\n\n  // decreasing phase before the peak\n  let rate = randfloat(0.9, 0.4);\n  let work = 2;\n  for (; work < peakStart; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  rate = randfloat(1.4, 2.0);\n  sellPrices[work++] = intceil(randfloat(1.4, rate) * basePrice) - 1;\n  sellPrices[work++] = intceil(rate * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, rate) * basePrice) - 1;\n\n  // decreasing phase after the peak\n  if (work < 14) {\n    rate = randfloat(0.9, 0.4);\n    for (; work < 14; work++) {\n      sellPrices[work] = intceil(rate * basePrice);\n      rate -= 0.03;\n      rate -= randfloat(0, 0.02);\n    }\n  }\n\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern3(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: [number, number][][] = [];\n  let metadata: { peakStart: number }[] = [];\n\n  [2, 3, 4, 5, 6, 7, 8, 9].forEach(peakStart => {\n    metadata.push({ peakStart });\n    let blankPrediction: typeof predictions[0] = [];\n    for (let i = 0; i < 14; i++)\n      blankPrediction.push([sellPrices[i], sellPrices[i]]);\n    predictions.push(blankPrediction);\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n    let minRate = 0.4;\n    let maxRate = 0.9;\n    let work = 2;\n    for (; work < config.peakStart; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation][work][0] = Math.floor(minRate * basePrice);\n        predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.03 + 0.02;\n      maxRate -= 0.03;\n    }\n\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation][work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(1.4 * basePrice) - 1;\n      predictions[variation][work][1] = Math.ceil(2 * basePrice) - 1;\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation][work][1] = Math.ceil(2 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation][work][0] = Math.floor(1.4 * basePrice) - 1;\n      predictions[variation][work][1] = Math.ceil(2 * basePrice) - 1;\n    }\n    work++;\n\n    if (work < 14) {\n      minRate = 0.4;\n      maxRate = 0.9;\n      for (; work < 14; work++) {\n        if (!sellPrices[work]) {\n          predictions[variation][work][0] = Math.floor(minRate * basePrice);\n          predictions[variation][work][1] = Math.ceil(maxRate * basePrice);\n        }\n        minRate -= 0.03 + 0.02;\n        maxRate -= 0.03;\n      }\n    }\n  }\n\n  return predictions;\n}\nfunction predictPattern(pattern: number, sellPrices: number[]) {\n  if (pattern === 0) return predictPattern0(sellPrices);\n  if (pattern === 1) return predictPattern1(sellPrices);\n  if (pattern === 2) return predictPattern2(sellPrices);\n  if (pattern === 3) return predictPattern3(sellPrices);\n  return [];\n}\n\nfunction runPattern(pattern: number, basePrice: number) {\n  if (pattern === 0) return pattern0(basePrice);\n  if (pattern === 1) return pattern1(basePrice);\n  if (pattern === 2) return pattern2(basePrice);\n  if (pattern === 3) return pattern3(basePrice);\n  return [];\n}\n\nfunction whichPattern(lastPattern: number) {\n  const chance = randint(0, 99);\n  switch (lastPattern) {\n    case 0:\n      if (chance < 20) return 0; // 20\n      if (chance < 50) return 1; // 30\n      if (chance < 65) return 2; // 15\n      return 3; // 35\n    case 1:\n      if (chance < 50) return 0; // 50\n      if (chance < 55) return 1; // 5\n      if (chance < 75) return 2; // 20\n      return 3; // 25\n    case 2:\n      if (chance < 25) return 0; // 25\n      if (chance < 70) return 1; // 45\n      if (chance < 75) return 2; // 5\n      return 3; // 25\n    case 3:\n      if (chance < 45) return 0; // 45\n      if (chance < 70) return 1; // 25\n      if (chance < 85) return 2; // 15\n      return 3; // 15\n  }\n  return 2;\n}\n// [\n//   \"Random\",\n//   \"Large Spike\",\n//   \"Decreasing\",\n//   \"Small Spike\"\n// ];\nfunction patternProbability(lastPattern: number) {\n  if (lastPattern === 0) return [0.2, 0.3, 0.15, 0.35];\n  if (lastPattern === 1) return [0.5, 0.05, 0.2, 0.25];\n  if (lastPattern === 2) return [0.25, 0.45, 0.05, 0.25];\n  if (lastPattern === 3) return [0.45, 0.25, 0.15, 0.15];\n  return [0.35, 0.25, 0.15, 0.25];\n}\nfunction startPrice() {\n  return randint(90, 110);\n}\n\n// [buy, buy, mon am, mon pm, tue am, tue pm...]\nexport function possiblePatterns(\n  sellPrices: number[],\n  lastPattern: number = -1\n) {\n  const startPrice = [...sellPrices];\n  for (let i = 2; i < startPrice.length; i++) startPrice[i] = 0;\n  const predictions = [\n    predictPattern0(startPrice),\n    predictPattern1(startPrice),\n    predictPattern2(startPrice),\n    predictPattern3(startPrice)\n  ];\n\n  // let text: string[] = [];\n  // let csv: string[] = [];\n  let patterns: Pattern[] = [];\n\n  const prob = patternProbability(lastPattern);\n\n  // has 4 patterns\n  predictions.forEach((predictions, idx) => {\n    const patternsTemp: typeof patterns = [];\n\n    // all predictions in this pattern\n    predictions.forEach(prediction => {\n      const pattern: typeof patterns[0] = {\n        dailyPriceRange: [],\n        probability: 0,\n        type: idx\n      };\n\n      // daily prediction\n      for (let i = 0; i < 2; i++) {\n        pattern.dailyPriceRange.push({\n          high: sellPrices[i],\n          low: sellPrices[i]\n        });\n      }\n      for (let i = 2; i < prediction.length; i++) {\n        const low = prediction[i][0];\n        const high = prediction[i][1];\n\n        // skip if not within range\n        if (sellPrices[i] && sellPrices[i] < low) return;\n        if (sellPrices[i] && sellPrices[i] > high) return;\n\n        pattern.dailyPriceRange.push({\n          high: high,\n          low: low\n        });\n      }\n      // this is a valid pattern, add it\n      patternsTemp.push(pattern);\n    });\n\n    // probability of each pattern in the prediction\n    patternsTemp.forEach(pattern => {\n      pattern.probability = prob[idx] / patternsTemp.length;\n    });\n\n    patterns.push(...patternsTemp);\n  });\n\n  // normalize probabilities\n  const totalProb = patterns.reduce((a, b) => a + b.probability, 0);\n  patterns.forEach(\n    pattern => (pattern.probability = pattern.probability / totalProb)\n  );\n\n  return { patterns };\n}\n\nexport function dailyPredictedPrice(patterns: Pattern[]) {\n  let expectedPrices: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let expectedPricesHigh: number[] = [];\n  let expectedPricesLow: number[] = [];\n  patterns.forEach(pattern => {\n    for (let startDay = 2; startDay < 14; startDay++) {\n      let expectedMax = 0;\n      let expectedHigh = 0;\n      let expectedLow = 0;\n      for (let day = startDay; day < 14; day++) {\n        const high = pattern.dailyPriceRange[day].high;\n        const low = pattern.dailyPriceRange[day].low;\n        const expected = (high + low) / 2;\n        if (expectedMax < expected) {\n          expectedMax = expected;\n          expectedHigh = high;\n          expectedLow = low;\n        }\n      }\n      expectedPrices[startDay] += expectedMax * pattern.probability;\n      expectedPricesLow[startDay] = Math.min(\n        expectedPricesLow[startDay] || 99999,\n        expectedLow\n      );\n      expectedPricesHigh[startDay] = Math.max(\n        expectedPricesHigh[startDay] || 0,\n        expectedHigh\n      );\n    }\n  });\n  return {\n    price: expectedPrices,\n    low: expectedPricesLow,\n    high: expectedPricesHigh\n  };\n}\n\nexport function expectedPrice(patterns: Pattern[], day: number) {\n  const expectedPrices = dailyPredictedPrice(patterns);\n  let expected = 0;\n  let high = 0;\n  let low = 0;\n  for (let i = day; i < 14; i++) {\n    if (expectedPrices.price[i] > expected) {\n      expected = expectedPrices.price[i];\n      high = expectedPrices.high[i];\n      low = expectedPrices.low[i];\n    }\n  }\n  return { expected, high, low };\n}\n\nexport function simulation(runs = 1000) {\n  let pattern = 2;\n\n  let totalProfit = 0;\n\n  for (let i = 0; i < runs; i++) {\n    const basePrice = startPrice();\n    const result =\n      pattern === 0\n        ? pattern0(basePrice)\n        : pattern === 1\n        ? pattern1(basePrice)\n        : pattern === 2\n        ? pattern2(basePrice)\n        : pattern === 3\n        ? pattern3(basePrice)\n        : [];\n\n    result.unshift(basePrice);\n    result.unshift(basePrice);\n\n    for (let i = 3; i < 14; i++) {\n      const knownData = [...result];\n      for (let j = i; j < 14; j++) knownData[j] = 0;\n      const { patterns } = possiblePatterns(knownData);\n      const { expected } = expectedPrice(patterns, i + 1);\n      const price = result[i];\n      // if (price > 125 || i === 13) {\n      //   const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n      //   totalProfit += gain;\n      //   console.log(\n      //     `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n      //   );\n      //   break;\n      // }\n      if (expected <= price || i === 13) {\n        const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n        totalProfit += gain;\n        console.log(\n          `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n        );\n        break;\n      }\n    }\n    pattern = whichPattern(pattern);\n  }\n\n  console.log(\"Expected money from investing $100\", totalProfit / runs + 100);\n}\n\nexport function simulateFromPrice(\n  sellPrices: number[],\n  lastPattern: number = -1,\n  maxTime = 1000\n) {\n  let allPrices: number[] = [];\n  let failedRuns = 0;\n  let totalProfit = 0;\n\n  const { patterns } = possiblePatterns(sellPrices, lastPattern);\n  const probabilityMap = [0, 0, 0, 0];\n  patterns.forEach(\n    pattern => (probabilityMap[pattern.type] += pattern.probability)\n  );\n  for (let i = 1; i < 4; i++) probabilityMap[i] += probabilityMap[i - 1]; // make cumulitive probability\n\n  const startTime = Date.now();\n\n  let runs = 0;\n  while (Date.now() - startTime < maxTime) {\n    runs++;\n    const basePrice = sellPrices[0];\n\n    const rand = Math.random();\n    const type =\n      rand < probabilityMap[0]\n        ? 0\n        : rand < probabilityMap[1]\n        ? 1\n        : rand < probabilityMap[2]\n        ? 2\n        : 3;\n    let result: number[] = [];\n    let attempts = 0;\n    while (true) {\n      result = runPattern(type, basePrice);\n      result.unshift(basePrice);\n      result.unshift(basePrice);\n      // make sure it matches a possible pattern\n      let match = false;\n      patterns.forEach(pattern => {\n        let thisMatches = true;\n        pattern.dailyPriceRange.forEach((price, idx) => {\n          if (price.high < result[idx]) thisMatches = false;\n          if (price.low > result[idx]) thisMatches = false;\n        });\n        if (thisMatches) match = true;\n      });\n      if (match) break;\n      if (attempts++ > 100) {\n        failedRuns++;\n        break;\n      }\n    }\n    if (attempts > 100) continue;\n\n    for (let i = sellPrices.length; i < 14; i++) {\n      const knownData = [...result];\n      for (let j = i; j < 14; j++) knownData[j] = 0;\n      const { patterns } = possiblePatterns(knownData);\n      const { expected } = expectedPrice(patterns, i + 1);\n      const price = result[i];\n      // if (price > 125 || i === 13) {\n      //   const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n      //   totalProfit += gain;\n      //   console.log(\n      //     `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n      //   );\n      //   break;\n      // }\n      if (expected <= price || i === 13) {\n        const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n        totalProfit += gain;\n        // console.log(result);\n        // console.log(\n        //   `Sell on day ${i -\n        //     2} at price ${price} return of ${gain}% - expected = ${expected}`\n        // );\n        allPrices.push(price);\n        break;\n      }\n    }\n  }\n\n  // console.log(\"Expected money from investing $100\", totalProfit / RUNS + 100);\n  return { expectedPrice: totalProfit / (runs - failedRuns) + 100, allPrices };\n}\n\nexport function makeHistogram(prices: number[], bucketSize: number) {\n  const counts: number[] = [];\n  for (let i = 0; i <= 700; i += bucketSize) counts[i / bucketSize] = 0;\n\n  prices.forEach(price => {\n    const idx = Math.floor(price / bucketSize);\n    counts[idx]++;\n  });\n  counts.forEach((c, i) => (counts[i] = (c / prices.length) * 100));\n  return counts;\n}\n\n// const prices = simulateFromPrice([100, 100, 90, 85], 0);\n// const hist = histogram(prices);\n// console.log(hist.join(\"\\n\"));\n\n// console.log(possiblePatterns([98, 98, 59, 55, 51, 48, 44, 41, 38, 120, 154]));\n// simulation();\n// console.log(predictPattern0([100, 100]));\n\n// console.log(possiblePatterns([100]).csv.join(\"\\n\"));\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\n// https://www.d3-graph-gallery.com/graph/line_confidence_interval.html\n\ninterface Area {\n  x: number;\n  y0: number;\n  y1: number;\n}\ninterface Line {\n  x: number;\n  y: number;\n}\n\nexport interface ChartData {\n  lines: { data: Line[] }[];\n  areas: { opacity?: number; data: Area[] }[];\n  title: string;\n}\n\ninterface IProps {\n  data: ChartData;\n  options: {\n    yDomain: [number, number];\n    xDomain: [number, number];\n    yTickFormat?: any;\n    xTickFormat?: any;\n  };\n}\n\ninterface ChartElements {\n  svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n  title: d3.Selection<SVGTextElement, unknown, null, undefined>;\n  x: d3.ScaleLinear<number, number>;\n  y: d3.ScaleLinear<number, number>;\n  areas: d3.Selection<SVGPathElement, Area[], null, undefined>[];\n  lines: d3.Selection<SVGPathElement, Line[], null, undefined>[];\n}\n\nexport const Chart = (props: IProps) => {\n  const d3Container = useRef(null);\n\n  // set the dimensions and margins of the graph\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 },\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n  const [chartElements, setChartElements] = useState(\n    null as ChartElements | null\n  );\n\n  useEffect(() => {\n    if (chartElements?.svg) chartElements.svg.remove();\n\n    // append the svg object to the body of the page\n    const newSvg = d3\n      .select(d3Container.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Add X axis --> it is a date format\n    const x = d3\n      .scaleLinear()\n      .domain(props.options.xDomain)\n      .range([0, width]);\n    newSvg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x).tickFormat(props.options.xTickFormat));\n\n    // Add Y axis\n    const y = d3\n      .scaleLinear()\n      .domain(props.options.yDomain)\n      .range([height, 0]);\n    newSvg\n      .append(\"g\")\n      .call(d3.axisLeft(y).tickFormat(props.options.yTickFormat));\n\n    const title = newSvg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0 + margin.top)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"16px\")\n      .text(props.data.title);\n\n    setChartElements({\n      ...chartElements,\n      svg: newSvg,\n      x,\n      y,\n      title,\n      areas: [],\n      lines: []\n    });\n  }, [props.options]);\n\n  useEffect(() => {\n    setChartElements(chartElements => {\n      if (!chartElements) return chartElements;\n\n      const { svg, x, y, areas, lines } = chartElements;\n      const newAreas: typeof areas = [];\n      const newLines: typeof lines = [];\n\n      props.data.areas.forEach((area, idx) => {\n        const elem = areas[idx] || svg.append(\"path\");\n        newAreas[idx] = elem;\n        elem\n          .datum(area.data)\n          .attr(\"fill\", \"#cce5df\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"opacity\", area.opacity !== undefined ? area.opacity : 1)\n          .attr(\n            \"d\",\n            d3\n              .area<Area>()\n              .x(d => x(d.x))\n              .y0(d => y(d.y0))\n              .y1(d => y(d.y1))\n          );\n      });\n\n      props.data.lines.forEach((line, idx) => {\n        const elem = lines[idx] || svg.append(\"path\");\n        newLines[idx] = elem;\n        elem\n          .datum(line.data)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"steelblue\")\n          .attr(\"stroke-width\", 1.5)\n          .attr(\n            \"d\",\n            d3\n              .line<Line>()\n              .x(d => x(d.x))\n              .y(d => y(d.y))\n          );\n      });\n\n      for (let i = newAreas.length; i < areas.length; i++) areas[i].remove();\n      for (let i = newLines.length; i < lines.length; i++) lines[i].remove();\n      return { ...chartElements, areas: newAreas, lines: newLines };\n    });\n  }, [props.data, chartElements?.svg]);\n\n  return (\n    <>\n      <svg\n        className=\"d3-component\"\n        width={400}\n        height={200}\n        ref={d3Container}\n      />\n    </>\n  );\n};\n\n// /* App */\n// export const MyApp = () => {\n//   return (\n//     <div className=\"my-app\">\n//       <MyD3Component data={[1, 2, 3]} />\n//     </div>\n//   );\n// };\n","interface StorageItem {\n  expiration: number;\n  value: any;\n}\n\ninterface DataStore {\n  [prop: string]: StorageItem;\n}\n\nlet memoryStore: DataStore = {};\n\nconst USE_LOCAL_STORE = typeof localStorage !== \"undefined\";\nconst LOCAL_STORE_KEY = \"MONETFE_DATA_STORE\";\nconst VALUE_EXPIRATION = 14 * 24 * 60 * 60 * 1000;\nconst EXPIRATION_CHECK_INTERVAL = 60 * 60 * 1000;\n\nlet lastExpirationCheck = 0;\nfunction checkForExpired() {\n  if (Date.now() < lastExpirationCheck + EXPIRATION_CHECK_INTERVAL) return;\n  const store = getStore();\n  Object.keys(store).forEach(key => {\n    if (store[key].expiration < Date.now()) delete store[key];\n  });\n  setStore(store);\n  lastExpirationCheck = Date.now();\n}\n\nfunction getStore(): DataStore {\n  if (USE_LOCAL_STORE) {\n    const dataStr = localStorage.getItem(LOCAL_STORE_KEY);\n    if (dataStr) return JSON.parse(dataStr);\n  }\n  return memoryStore;\n}\n\nfunction setStore(value: DataStore) {\n  memoryStore = value;\n  if (USE_LOCAL_STORE) {\n    localStorage.setItem(LOCAL_STORE_KEY, JSON.stringify(value));\n  }\n}\n\nfunction set(key: string, value: any, expiration = VALUE_EXPIRATION) {\n  const store = getStore();\n  store[key] = {\n    expiration: Date.now() + expiration,\n    value\n  };\n  setStore(store);\n  return value;\n}\n\nfunction get(key: string) {\n  const data = getStore()[key];\n  if (!data) return;\n  if (data.expiration < Date.now()) return clear(key);\n  return data.value;\n}\n\nfunction clear(key: string) {\n  const data = getStore();\n  delete data[key];\n  setStore(data);\n}\n\nexport { set, get, clear, checkForExpired };\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  possiblePatterns,\n  patternNames,\n  expectedPrice,\n  simulateFromPrice,\n  makeHistogram\n} from \"./turnipCalculator\";\nimport { Chart, ChartData } from \"./Chart\";\nimport * as storageService from \"./storageService\";\n\nimport style from \"./Turnips.module.css\";\n\nconst turnipPriceStore = storageService.get(\"turnipPriceStore\");\n\nconst PriceForm = (props: {\n  onChange: { (price: number[], lastPattern: number): unknown };\n}) => {\n  const [lastPattern, setLastPattern] = useState(\n    turnipPriceStore?.lastPattern || 4\n  );\n  const [prices, setPrices] = useState<number[]>(\n    turnipPriceStore?.prices?.filter(Boolean) || [100, 100]\n  );\n  const changePrice = (day: number) => (e: { target: { value: string } }) => {\n    const newPrices = [...prices];\n    newPrices[day] = parseFloat(e.target.value);\n    if (day === 0) newPrices[1] = newPrices[0] || (undefined as any);\n    setPrices(newPrices);\n  };\n  useDebounce(() => {\n    storageService.set(\"turnipPriceStore\", { prices, lastPattern });\n    props.onChange(prices, lastPattern);\n  }, 1000);\n  return (\n    <>\n      <div>\n        Last week's pattern:{\" \"}\n        <select\n          onChange={e => setLastPattern(parseInt(e.target.value))}\n          className={style.patternSelect}\n        >\n          {patternNames.map((name, idx) => (\n            <option selected={idx === lastPattern} value={idx}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className={style.priceTable}>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[0] || \"\"}\n            onChange={changePrice(0)}\n          />\n          <div className={style.dayName}>Buy Price</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[2] || \"\"}\n            onChange={changePrice(2)}\n          />\n          <input\n            type=\"text\"\n            value={prices[3] || \"\"}\n            onChange={changePrice(3)}\n          />\n          <div className={style.dayName}>Monday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[4] || \"\"}\n            onChange={changePrice(4)}\n          />\n          <input\n            type=\"text\"\n            value={prices[5] || \"\"}\n            onChange={changePrice(5)}\n          />\n          <div className={style.dayName}>Tuesday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[6] || \"\"}\n            onChange={changePrice(6)}\n          />\n          <input\n            type=\"text\"\n            value={prices[7] || \"\"}\n            onChange={changePrice(7)}\n          />\n          <div className={style.dayName}>Wednesday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[8] || \"\"}\n            onChange={changePrice(8)}\n          />\n          <input\n            type=\"text\"\n            value={prices[9] || \"\"}\n            onChange={changePrice(9)}\n          />\n          <div className={style.dayName}>Thursday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[10] || \"\"}\n            onChange={changePrice(10)}\n          />\n          <input\n            type=\"text\"\n            value={prices[11] || \"\"}\n            onChange={changePrice(11)}\n          />\n          <div className={style.dayName}>Friday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"text\"\n            value={prices[12] || \"\"}\n            onChange={changePrice(12)}\n          />\n          <input\n            type=\"text\"\n            value={prices[13] || \"\"}\n            onChange={changePrice(13)}\n          />\n          <div className={style.dayName}>Saturday</div>\n        </span>\n      </div>\n    </>\n  );\n};\n\nfunction useDebounceFn(func: { (): unknown }, delay: number, deps: any[]) {\n  const [data] = useState({ id: (0 as unknown) as NodeJS.Timeout });\n\n  useEffect(() => {\n    clearTimeout(data.id);\n    data.id = setTimeout(() => {\n      func();\n    }, delay);\n  }, [...deps]);\n}\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value]);\n  return debouncedValue;\n}\n\ninterface SimulationResult {\n  histogram: number[];\n  expected: number;\n  high: number;\n  low: number;\n}\n\nexport const Turnips = () => {\n  // [\n  //   \"Random\",\n  //   \"Large Spike\",\n  //   \"Decreasing\",\n  //   \"Small Spike\"\n  // ];\n  const [lastPattern, setLastPattern] = useState(4);\n  const [prices, setPrices] = useState<number[]>([]);\n  // const prices = [98, 98]; // , 59, 55, 51, 48, 44, 41, 38, 120, 117, 154\n  const [simulated, setSimulated] = useState<SimulationResult | null>(null);\n\n  let currentDay = 0;\n  let currentPrice = 0;\n  prices.forEach((p, i) => {\n    if (p) {\n      currentDay = i;\n      currentPrice = p;\n    }\n  });\n  const { patterns } = possiblePatterns(prices, lastPattern);\n\n  const expected = expectedPrice(patterns, currentDay + 1);\n\n  // if (patterns.length > 1) {\n  //   const masterPattern = cloneDeep(patterns[0]);\n  //   patterns.forEach(pattern => {\n  //     pattern.forEach((val, i) => {\n  //       if (masterPattern[i].high < val.high) masterPattern[i].high = val.high;\n  //       if (masterPattern[i].low > val.low) masterPattern[i].low = val.low;\n  //     });\n  //   });\n  //   patterns.unshift(masterPattern);\n  // }\n\n  const charts: ChartData[] = patterns.map(pattern => {\n    const area = pattern.dailyPriceRange.map((p, i) => ({\n      x: i,\n      y0: p.low as number,\n      y1: p.high as number\n    }));\n    return {\n      lines: [\n        {\n          data: pattern.dailyPriceRange.map((p, i) => ({ x: i, y: prices[i] }))\n        }\n      ],\n      areas: [{ data: area, opacity: pattern.probability * 4 }],\n      title: `${patternNames[pattern.type]} (${Math.round(\n        pattern.probability * 1000\n      ) / 10}%)`\n    };\n  });\n\n  if (patterns.length > 1) {\n    const masterChart: ChartData = {\n      lines: [\n        {\n          data: patterns[0].dailyPriceRange.map((p, i) => ({\n            x: i,\n            y: prices[i]\n          }))\n        }\n      ],\n      areas: charts.map(c => c.areas[0]),\n      title: \"All Possible Prices\"\n    };\n    charts.forEach(\n      chart => (chart.areas[0] = { ...chart.areas[0], opacity: 1 })\n    );\n    charts.unshift(masterChart);\n  }\n\n  const simulate = () => {\n    // console.log(\"simulate=================\", prices, lastPattern);\n    const { expectedPrice, allPrices } = simulateFromPrice(\n      prices,\n      lastPattern,\n      2000\n    );\n    // console.log(allPrices.length);\n    const histogram = makeHistogram(allPrices, 10);\n    setSimulated({\n      histogram,\n      expected: expectedPrice,\n      low: Math.min(...allPrices),\n      high: Math.max(...allPrices)\n    });\n  };\n  useEffect(\n    () =>\n      setSimulated({\n        ...(simulated as SimulationResult),\n        expected: 0,\n        high: 0,\n        low: 0\n      }),\n    [prices, lastPattern]\n  );\n  useDebounceFn(simulate, 1000, [prices, lastPattern]);\n\n  return (\n    <>\n      <h1>Animal Crossing New Horizons Turnip Price Calculator</h1>\n      <PriceForm\n        onChange={(prices, pattern) => {\n          setPrices(prices);\n          setLastPattern(pattern);\n        }}\n      />\n      {charts.length === 0 ? (\n        <div className={style.recommendation}>\n          This scenario doesn't seem possible. Is there a mistake in the prices?\n        </div>\n      ) : (\n        <>\n          <div className={style.recommendation}>\n            {(simulated?.expected || expected.expected) > currentPrice\n              ? `Recommendation is to hold. `\n              : `Sell Now!! `}\n            Prices are expected to be{\" \"}\n            <b>{Math.round(simulated?.expected || expected.expected)}</b> in the\n            future with a low of{\" \"}\n            <span style={{ color: \"red\" }}>\n              {Math.min(expected.low, simulated?.low || 999)}\n            </span>{\" \"}\n            and a high of{\" \"}\n            <span style={{ color: \"green\" }}>\n              {Math.max(expected.high, simulated?.high || 0)}\n            </span>\n            .\n          </div>\n          {simulated?.histogram ? (\n            <Chart\n              data={{\n                lines: [\n                  {\n                    data: simulated.histogram.map((y, i) => ({ x: i * 10, y }))\n                  }\n                ],\n                areas: [],\n                title: \"Probability\"\n              }}\n              options={{\n                xDomain: [0, 600], //histDomain.x,\n                yDomain: [0, 100], //histDomain.y,\n                yTickFormat: (a: any) => `${a}%`\n              }}\n            />\n          ) : null}\n          {charts.map((chart, idx) => {\n            return (\n              <Chart\n                key={`${idx}-${JSON.stringify(chart)}`}\n                data={chart}\n                options={{\n                  yDomain: [0, 600],\n                  xDomain: [0, 14],\n                  xTickFormat: (d: number) =>\n                    [\n                      \"Buy\",\n                      \"\",\n                      \"Mon\",\n                      \"\",\n                      \"Tue\",\n                      \"\",\n                      \"Wed\",\n                      \"\",\n                      \"Thu\",\n                      \"\",\n                      \"Fri\",\n                      \"\",\n                      \"Sat\",\n                      \"\"\n                    ][d as number]\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Turnips } from \"./Turnips\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Turnips />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}