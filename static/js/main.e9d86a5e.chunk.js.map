{"version":3,"sources":["Turnips.module.css","turnipCalculator.ts","Chart.tsx","storageService.ts","Turnips.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","randint","low","high","Math","floor","random","intceil","num","ceil","randfloat","patternNames","pattern0","basePrice","sellPrices","work","hiPhaseLen1","decPhaseLen1","hiPhaseLen2and3","decPhaseLen2","hiPhaseLen3","i","rate","shift","predictPattern0","predictions","metadata","forEach","push","blankPrediction","daily","decreasingStart","variation","length","config","minRate","maxRate","pattern1","peakStart","predictPattern1","pattern2","predictPattern2","pattern3","predictPattern3","predictPattern","pattern","runPattern","patternProbability","lastPattern","possiblePatterns","firstWeek","startPrice","range","map","l","ld","ii","patterns","prob","idx","patternsTemp","prediction","dailyPriceRange","probability","type","totalProb","reduce","a","b","expectedPrice","day","expectedPrices","expectedPricesHigh","expectedPricesLow","startDay","expectedMax","expectedHigh","expectedLow","expected","min","max","price","dailyPredictedPrice","simulateFromPrice","maxTime","allPrices","failedRuns","totalProfit","bestPossiblePrice","pop","probabilityMap","startTime","Date","now","runs","decreasingRuns","rand","result","attempts","unshift","match","thisMatches","j","maxPrice","knownData","isDecreasing","every","p","gain","console","log","bestExpectedPrice","makeHistogram","prices","bucketSize","counts","c","Chart","props","d3Container","useRef","margin","width","height","useState","chartElements","setChartElements","useEffect","svg","remove","newSvg","d3","current","attr","append","style","x","domain","options","xDomain","call","tickFormat","xTickFormat","y","yDomain","yTickFormat","title","text","data","callout","g","value","path","selectAll","join","split","d","_","node","getBBox","w","h","dataArea","tooltip","on","mouse","this","selectedPoints","allXvalues","Set","areas","item","point","add","lines","closestX","xPos","invert","Array","from","xValue","abs","allLines","allAreas","allPoints","bisect","calloutMessage","newAreas","newLines","area","elem","datum","undefined","opacity","y0","y1","line","className","ref","memoryStore","USE_LOCAL_STORE","localStorage","getStore","dataStr","getItem","JSON","parse","setStore","setItem","stringify","DAYS","turnipPriceStore","key","expiration","clear","storageService","simulationRun","cleanPrices","PriceForm","setLastPattern","setPrices","changePrice","e","newPrices","parseFloat","target","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","store","onChange","parseInt","patternSelect","name","selected","priceTable","formDay","dayName","placeholder","resetForm","onClick","window","confirm","currentPattern","instructions","Turnips","simulated","setSimulated","currentDay","currentPrice","last","charts","round","masterChart","chart","simulate","iterations","currentRun","filter","Boolean","res","Promise","r","histogram","func","deps","id","useDebounceFn","recommendation","color","yMax","yMin","App","isLocalhost","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9d86a5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"priceTable\":\"Turnips_priceTable__1R06m\",\"formDay\":\"Turnips_formDay__1WR1H\",\"recommendation\":\"Turnips_recommendation__1YEcW\",\"patternSelect\":\"Turnips_patternSelect__1x5LR\",\"instructions\":\"Turnips_instructions__3ei3j\",\"resetForm\":\"Turnips_resetForm__26NYJ\"};","// https://gist.github.com/Treeki/85be14d297c80c8b3c0a76375743325b\n\nconst randbool = () => Math.random() > 0.5;\nconst randint = (low: number, high: number) =>\n  Math.floor(Math.random() * (high - low + 1)) + low;\nconst intceil = (num: number) => Math.ceil(num);\nconst randfloat = (low: number, high: number) =>\n  Math.random() * (high - low) + low;\n\ninterface Pattern {\n  dailyPriceRange: { low: number; high: number }[];\n  probability: number;\n  type: number; // 0|1|2|3;\n  decreasingStart: number; // first day of a decreasing pattern\n}\n\nexport const patternNames = [\n  \"Random\",\n  \"Large Spike\",\n  \"Decreasing\",\n  \"Small Spike\",\n  \"Unknown\",\n  \"First Time Buyer\",\n];\n\ninterface Prediction {\n  daily: [number, number][];\n  decreasingStart: number;\n}\n\n// 0.9 - 1.4 random\nfunction pattern0(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 0: high, decreasing, high, decreasing, high\n  let work = 2;\n\n  const hiPhaseLen1 = randint(0, 6);\n  const decPhaseLen1 = randbool() ? 3 : 2;\n  const hiPhaseLen2and3 = 7 - hiPhaseLen1;\n  const decPhaseLen2 = 5 - decPhaseLen1;\n  const hiPhaseLen3 = randint(0, hiPhaseLen2and3 - 1);\n\n  // high phase 1\n  for (let i = 0; i < hiPhaseLen1; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n\n  // decreasing phase 1\n  let rate = randfloat(0.8, 0.6);\n  for (let i = 0; i < decPhaseLen1; i++) {\n    sellPrices[work++] = intceil(rate * basePrice);\n    rate -= 0.04;\n    rate -= randfloat(0, 0.06);\n  }\n\n  // high phase 2\n  for (let i = 0; i < hiPhaseLen2and3 - hiPhaseLen3; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n\n  // decreasing phase 2\n  rate = randfloat(0.8, 0.6);\n  for (let i = 0; i < decPhaseLen2; i++) {\n    sellPrices[work++] = intceil(rate * basePrice);\n    rate -= 0.04;\n    rate -= randfloat(0, 0.06);\n  }\n\n  // high phase 3\n  for (let i = 0; i < hiPhaseLen3; i++) {\n    sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern0(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: Prediction[] = [];\n  let metadata: {\n    decPhaseLen1: number;\n    hiPhaseLen1: number;\n    hiPhaseLen3: number;\n    hiPhaseLen2and3: number;\n    decPhaseLen2: number;\n  }[] = [];\n\n  [0, 1, 2, 3, 4, 5, 6].forEach((hiPhaseLen1) => {\n    [2, 3].forEach((decPhaseLen1) => {\n      [0, 1, 2, 3, 4, 5, 6].forEach((hiPhaseLen3) => {\n        const hiPhaseLen2and3 = 7 - hiPhaseLen1;\n        const decPhaseLen2 = 5 - decPhaseLen1;\n        if (hiPhaseLen3 > hiPhaseLen2and3 - 1) return;\n\n        metadata.push({\n          decPhaseLen1,\n          hiPhaseLen1,\n          hiPhaseLen3,\n          hiPhaseLen2and3,\n          decPhaseLen2,\n        });\n        let blankPrediction: Prediction = { daily: [], decreasingStart: 14 };\n        for (let i = 0; i < 14; i++)\n          blankPrediction.daily.push([sellPrices[i], sellPrices[i]]);\n        predictions.push(blankPrediction);\n      });\n    });\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n\n    // high phase 1\n    let work = 2;\n    for (let i = 0; i < config.hiPhaseLen1; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n\n    // decreasing phase 1\n    let minRate = 0.6;\n    let maxRate = 0.8;\n    for (let i = 0; i < config.decPhaseLen1; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(minRate * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.04 + 0.06;\n      maxRate -= 0.04;\n      work++;\n    }\n\n    // high phase 2\n    for (let i = 0; i < config.hiPhaseLen2and3 - config.hiPhaseLen3; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n\n    if (config.hiPhaseLen3 === 0) predictions[variation].decreasingStart = work;\n\n    // decreasing phase 2\n    minRate = 0.6;\n    maxRate = 0.8;\n    for (let i = 0; i < config.decPhaseLen2; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(minRate * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.04 + 0.06;\n      maxRate -= 0.04;\n      work++;\n    }\n    // high phase 3\n    for (let i = 0; i < config.hiPhaseLen3; i++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n      }\n      work++;\n    }\n  }\n\n  return predictions;\n}\n// 2.0 - 6.0 large spike\nfunction pattern1(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 1: decreasing middle, high spike, random low\n  const peakStart = randint(3, 9);\n  let rate = randfloat(0.9, 0.85);\n  let work = 2;\n  for (; work < peakStart; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, 2.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(2.0, 6.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, 2.0) * basePrice);\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  for (; work < 14; work++) {\n    sellPrices[work] = intceil(randfloat(0.4, 0.9) * basePrice);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern1(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: Prediction[] = [];\n  let metadata: { peakStart: number }[] = [];\n\n  [3, 4, 5, 6, 7, 8, 9].forEach((peakStart) => {\n    metadata.push({ peakStart });\n    let blankPrediction: Prediction = { daily: [], decreasingStart: 14 };\n    for (let i = 0; i < 14; i++)\n      blankPrediction.daily.push([sellPrices[i], sellPrices[i]]);\n    predictions.push(blankPrediction);\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n    let minRate = 0.85;\n    let maxRate = 0.9;\n    let work = 2;\n    for (; work < config.peakStart; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(minRate * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.03 + 0.02;\n      maxRate -= 0.03;\n    }\n\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(2.0 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(2.0 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(6.0 * basePrice);\n    }\n    work++;\n    predictions[variation].decreasingStart = work;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(2.0 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n\n    for (; work < 14; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(0.4 * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(0.9 * basePrice);\n      }\n    }\n  }\n\n  return predictions;\n}\n// 0.9 - 0.3 decreasing\nfunction pattern2(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 2: consistently decreasing\n  let rate = 0.9;\n  rate -= randfloat(0, 0.05);\n  for (let work = 2; work < 14; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern2(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: Prediction[] = [];\n\n  let blankPrediction: Prediction = { daily: [], decreasingStart: 14 };\n  for (let i = 0; i < 14; i++)\n    blankPrediction.daily.push([sellPrices[i], sellPrices[i]]);\n  predictions.push(blankPrediction);\n\n  let minRate = 0.9;\n  let maxRate = 0.9;\n\n  minRate -= 0.05;\n  maxRate -= 0;\n  predictions[0].decreasingStart = 2;\n  for (let work = 2; work < 14; work++) {\n    for (let variation = 0; variation < predictions.length; variation++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(minRate * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(maxRate * basePrice);\n      }\n    }\n    minRate -= 0.03 + 0.02;\n    maxRate -= 0.03;\n  }\n  return predictions;\n}\n// 1.4 - 2.0 small spike\nfunction pattern3(basePrice: number) {\n  let sellPrices = [basePrice, basePrice];\n  // PATTERN 3: decreasing, spike, decreasing\n  const peakStart = randint(2, 9);\n\n  // decreasing phase before the peak\n  let rate = randfloat(0.9, 0.4);\n  let work = 2;\n  for (; work < peakStart; work++) {\n    sellPrices[work] = intceil(rate * basePrice);\n    rate -= 0.03;\n    rate -= randfloat(0, 0.02);\n  }\n\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  sellPrices[work++] = intceil(randfloat(0.9, 1.4) * basePrice);\n  rate = randfloat(1.4, 2.0);\n  sellPrices[work++] = intceil(randfloat(1.4, rate) * basePrice) - 1;\n  sellPrices[work++] = intceil(rate * basePrice);\n  sellPrices[work++] = intceil(randfloat(1.4, rate) * basePrice) - 1;\n\n  // decreasing phase after the peak\n  if (work < 14) {\n    rate = randfloat(0.9, 0.4);\n    for (; work < 14; work++) {\n      sellPrices[work] = intceil(rate * basePrice);\n      rate -= 0.03;\n      rate -= randfloat(0, 0.02);\n    }\n  }\n\n  sellPrices.shift();\n  sellPrices.shift();\n  return sellPrices;\n}\nfunction predictPattern3(sellPrices: number[]) {\n  const basePrice = sellPrices[0];\n  // [low, high] x 14 vals x prediction trees\n  let predictions: Prediction[] = [];\n  let metadata: { peakStart: number }[] = [];\n\n  [2, 3, 4, 5, 6, 7, 8, 9].forEach((peakStart) => {\n    metadata.push({ peakStart });\n    let blankPrediction: Prediction = { daily: [], decreasingStart: 14 };\n    for (let i = 0; i < 14; i++)\n      blankPrediction.daily.push([sellPrices[i], sellPrices[i]]);\n    predictions.push(blankPrediction);\n  });\n\n  for (let variation = 0; variation < metadata.length; variation++) {\n    const config = metadata[variation];\n    let minRate = 0.4;\n    let maxRate = 0.9;\n    let work = 2;\n    for (; work < config.peakStart; work++) {\n      if (!sellPrices[work]) {\n        predictions[variation].daily[work][0] = Math.floor(minRate * basePrice);\n        predictions[variation].daily[work][1] = Math.ceil(maxRate * basePrice);\n      }\n      minRate -= 0.03 + 0.02;\n      maxRate -= 0.03;\n    }\n\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(0.9 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(1.4 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(1.4 * basePrice) - 1;\n      predictions[variation].daily[work][1] = Math.ceil(2 * basePrice) - 1;\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(1.4 * basePrice);\n      predictions[variation].daily[work][1] = Math.ceil(2 * basePrice);\n    }\n    work++;\n    if (!sellPrices[work]) {\n      predictions[variation].daily[work][0] = Math.floor(1.4 * basePrice) - 1;\n      predictions[variation].daily[work][1] = Math.ceil(2 * basePrice) - 1;\n    }\n    work++;\n\n    predictions[variation].decreasingStart = work;\n\n    if (work < 14) {\n      minRate = 0.4;\n      maxRate = 0.9;\n      for (; work < 14; work++) {\n        if (!sellPrices[work]) {\n          predictions[variation].daily[work][0] = Math.floor(\n            minRate * basePrice\n          );\n          predictions[variation].daily[work][1] = Math.ceil(\n            maxRate * basePrice\n          );\n        }\n        minRate -= 0.03 + 0.02;\n        maxRate -= 0.03;\n      }\n    }\n  }\n\n  return predictions;\n}\nfunction predictPattern(pattern: number, sellPrices: number[]) {\n  if (pattern === 0) return predictPattern0(sellPrices);\n  if (pattern === 1) return predictPattern1(sellPrices);\n  if (pattern === 2) return predictPattern2(sellPrices);\n  if (pattern === 3) return predictPattern3(sellPrices);\n  return [];\n}\n\nfunction runPattern(pattern: number, basePrice: number) {\n  if (pattern === 0) return pattern0(basePrice);\n  if (pattern === 1) return pattern1(basePrice);\n  if (pattern === 2) return pattern2(basePrice);\n  if (pattern === 3) return pattern3(basePrice);\n  return [];\n}\n\nfunction whichPattern(lastPattern: number) {\n  const chance = randint(0, 99);\n  switch (lastPattern) {\n    case 0:\n      if (chance < 20) return 0; // 20\n      if (chance < 50) return 1; // 30\n      if (chance < 65) return 2; // 15\n      return 3; // 35\n    case 1:\n      if (chance < 50) return 0; // 50\n      if (chance < 55) return 1; // 5\n      if (chance < 75) return 2; // 20\n      return 3; // 25\n    case 2:\n      if (chance < 25) return 0; // 25\n      if (chance < 70) return 1; // 45\n      if (chance < 75) return 2; // 5\n      return 3; // 25\n    case 3:\n      if (chance < 45) return 0; // 45\n      if (chance < 70) return 1; // 25\n      if (chance < 85) return 2; // 15\n      return 3; // 15\n  }\n  return 2;\n}\n// [\n//   \"Random\",\n//   \"Large Spike\",\n//   \"Decreasing\",\n//   \"Small Spike\"\n// ];\nfunction patternProbability(lastPattern: number) {\n  if (lastPattern === 0) return [0.2, 0.3, 0.15, 0.35];\n  if (lastPattern === 1) return [0.5, 0.05, 0.2, 0.25];\n  if (lastPattern === 2) return [0.25, 0.45, 0.05, 0.25];\n  if (lastPattern === 3) return [0.45, 0.25, 0.15, 0.15];\n  return [0.35, 0.25, 0.15, 0.25];\n}\nfunction startPrice() {\n  return randint(90, 110);\n}\n\n// [buy, buy, mon am, mon pm, tue am, tue pm...]\nexport function possiblePatterns(\n  sellPrices: number[],\n  lastPattern: number = -1,\n  firstWeek = false\n): { patterns: Pattern[] } {\n  if (lastPattern === 5) firstWeek = true;\n  // console.log(sellPrices);\n  const startPrice = [...sellPrices];\n  for (let i = 2; i < startPrice.length; i++) startPrice[i] = 0;\n  let predictions = [\n    predictPattern0(startPrice),\n    predictPattern1(startPrice),\n    predictPattern2(startPrice),\n    predictPattern3(startPrice),\n  ];\n\n  if (firstWeek) {\n    for (let i = 0; i < 4; i++) {\n      const low = predictPattern(i, [90]);\n      const high = predictPattern(i, [110]);\n      const range = low.map((l, i) => {\n        l.daily.forEach((ld, ii) => {\n          ld[1] = high[i].daily[ii][1];\n        });\n        return l;\n      });\n      predictions[i] = range;\n    }\n  }\n\n  // let text: string[] = [];\n  // let csv: string[] = [];\n  let patterns: Pattern[] = [];\n\n  const prob = patternProbability(lastPattern);\n\n  // has 4 patterns\n  predictions.forEach((predictions, idx) => {\n    const patternsTemp: typeof patterns = [];\n\n    // all predictions in this pattern\n    predictions.forEach((prediction) => {\n      const pattern: typeof patterns[0] = {\n        dailyPriceRange: [],\n        probability: 0,\n        type: idx,\n        decreasingStart: prediction.decreasingStart,\n      };\n\n      // daily prediction\n      for (let i = 0; i < 2; i++) {\n        pattern.dailyPriceRange.push({\n          high: sellPrices[i],\n          low: sellPrices[i],\n        });\n      }\n      for (let i = 2; i < prediction.daily.length; i++) {\n        const low = prediction.daily[i][0];\n        const high = prediction.daily[i][1];\n\n        // skip if not within range\n        if (sellPrices[i] && sellPrices[i] < low) return;\n        if (sellPrices[i] && sellPrices[i] > high) return;\n\n        pattern.dailyPriceRange.push({\n          high: high,\n          low: low,\n        });\n      }\n      // this is a valid pattern, add it\n      patternsTemp.push(pattern);\n    });\n\n    // probability of each pattern in the prediction\n    patternsTemp.forEach((pattern) => {\n      pattern.probability = prob[idx] / predictions.length;\n    });\n\n    patterns.push(...patternsTemp);\n  });\n\n  // normalize probabilities\n  const totalProb = patterns.reduce((a, b) => a + b.probability, 0);\n  patterns.forEach(\n    (pattern) => (pattern.probability = pattern.probability / totalProb)\n  );\n\n  if (!patterns.length && !firstWeek)\n    return possiblePatterns(sellPrices, lastPattern, true);\n\n  return { patterns };\n}\n\nexport function dailyPredictedPrice(patterns: Pattern[]) {\n  let expectedPrices: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let expectedPricesHigh: number[] = [];\n  let expectedPricesLow: number[] = [];\n  patterns.forEach((pattern) => {\n    for (let startDay = 2; startDay < 14; startDay++) {\n      let expectedMax = 0;\n      let expectedHigh = 0;\n      let expectedLow = 0;\n      for (let day = startDay; day < 14; day++) {\n        const high = pattern.dailyPriceRange[day].high;\n        const low = pattern.dailyPriceRange[day].low;\n        const expected = (high + low) / 2;\n        if (expectedMax < expected) {\n          expectedMax = expected;\n          expectedHigh = high;\n          expectedLow = low;\n        }\n      }\n      expectedPrices[startDay] += expectedMax * pattern.probability;\n      expectedPricesLow[startDay] = Math.min(\n        expectedPricesLow[startDay] || 99999,\n        expectedLow\n      );\n      expectedPricesHigh[startDay] = Math.max(\n        expectedPricesHigh[startDay] || 0,\n        expectedHigh\n      );\n    }\n  });\n  return {\n    price: expectedPrices,\n    low: expectedPricesLow,\n    high: expectedPricesHigh,\n  };\n}\n\nexport function expectedPrice(patterns: Pattern[], day: number) {\n  const expectedPrices = dailyPredictedPrice(patterns);\n  let expected = 0;\n  let high = 0;\n  let low = 0;\n  for (let i = day; i < 14; i++) {\n    if (expectedPrices.price[i] > expected) {\n      expected = expectedPrices.price[i];\n      high = expectedPrices.high[i];\n      low = expectedPrices.low[i];\n    }\n  }\n  return { expected, high, low };\n}\n\nexport function simulation(runs = 1000) {\n  let pattern = 2;\n\n  let totalProfit = 0;\n\n  for (let i = 0; i < runs; i++) {\n    const basePrice = startPrice();\n    const result =\n      pattern === 0\n        ? pattern0(basePrice)\n        : pattern === 1\n        ? pattern1(basePrice)\n        : pattern === 2\n        ? pattern2(basePrice)\n        : pattern === 3\n        ? pattern3(basePrice)\n        : [];\n\n    result.unshift(basePrice);\n    result.unshift(basePrice);\n\n    for (let i = 3; i < 14; i++) {\n      const knownData = [...result];\n      for (let j = i; j < 14; j++) knownData[j] = 0;\n      const { patterns } = possiblePatterns(knownData);\n      const { expected } = expectedPrice(patterns, i + 1);\n      const price = result[i];\n      // if (price > 125 || i === 13) {\n      //   const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n      //   totalProfit += gain;\n      //   console.log(\n      //     `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n      //   );\n      //   break;\n      // }\n      if (expected <= price || i === 13) {\n        const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n        totalProfit += gain;\n        console.log(\n          `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n        );\n        break;\n      }\n    }\n    pattern = whichPattern(pattern);\n  }\n\n  console.log(\"Expected money from investing $100\", totalProfit / runs + 100);\n}\n\nexport function simulateFromPrice(\n  sellPrices: number[],\n  lastPattern: number = -1,\n  maxTime = 1000\n) {\n  let allPrices: number[] = [];\n  let failedRuns = 0;\n  let totalProfit = 0;\n  let bestPossiblePrice = 0;\n  sellPrices = [...sellPrices];\n  while (!sellPrices[sellPrices.length - 1]) sellPrices.pop();\n\n  const { patterns } = possiblePatterns(sellPrices, lastPattern);\n  const probabilityMap = [0, 0, 0, 0];\n  patterns.forEach(\n    (pattern) => (probabilityMap[pattern.type] += pattern.probability)\n  );\n  for (let i = 1; i < 4; i++) probabilityMap[i] += probabilityMap[i - 1]; // make cumulitive probability\n\n  const startTime = Date.now();\n  const basePrice = sellPrices[0];\n\n  let runs = 0;\n  let decreasingRuns = 0;\n  while (Date.now() - startTime < maxTime) {\n    runs++;\n\n    const rand = Math.random();\n    const type =\n      rand < probabilityMap[0]\n        ? 0\n        : rand < probabilityMap[1]\n        ? 1\n        : rand < probabilityMap[2]\n        ? 2\n        : 3;\n    let result: number[] = [];\n    let attempts = 0;\n    while (true) {\n      result = runPattern(type, basePrice);\n      result.unshift(basePrice);\n      result.unshift(basePrice);\n      // make sure it matches a possible pattern\n      let match = false;\n      patterns.forEach((pattern) => {\n        let thisMatches = true;\n        pattern.dailyPriceRange.forEach((price, idx) => {\n          if (price.high < result[idx]) thisMatches = false;\n          if (price.low > result[idx]) thisMatches = false;\n        });\n        if (thisMatches) match = true;\n      });\n      if (match) break;\n      if (attempts++ > 100) {\n        failedRuns++;\n        break;\n      }\n    }\n    if (attempts > 100) continue;\n\n    // make the randomized result start the same as current sell prices\n    for (let j = 0; j < sellPrices.length; j++) result[j] = sellPrices[j];\n\n    // find the max price with perfect knowledge of the future\n    let maxPrice = 0;\n    for (let i = sellPrices.length - 1; i < 14; i++) {\n      if (result[i] > maxPrice) maxPrice = result[i];\n    }\n    bestPossiblePrice += maxPrice;\n\n    for (let i = sellPrices.length; i < 14; i++) {\n      const knownData = [...result];\n      for (let j = i + 1; j < 14; j++) knownData[j] = 0;\n      const { patterns } = possiblePatterns(knownData);\n      const { expected } = expectedPrice(patterns, i + 1);\n      let price = result[i];\n      // if (price > 125 || i === 13) {\n      //   const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n      //   totalProfit += gain;\n      //   console.log(\n      //     `Sell on day ${i - 2} at price ${price} return of ${gain}%`\n      //   );\n      //   break;\n      // }\n      const isDecreasing = patterns.every((p) => p.decreasingStart <= i);\n      if (isDecreasing && i === sellPrices.length) {\n        price = sellPrices[i - 1];\n        decreasingRuns++;\n      }\n      if (expected <= price || i === 13 || isDecreasing) {\n        const gain = Math.floor((1000 * (price - basePrice)) / basePrice) / 10;\n        totalProfit += gain;\n        // console.log(result);\n        // console.log(\n        //   `Sell on day ${i -\n        //     2} at price ${price} return of ${gain}% - expected = ${expected}`\n        // );\n        if (price < 40) console.log(knownData);\n        allPrices.push(price);\n        break;\n      }\n    }\n  }\n\n  // console.log(\"Expected money from investing $100\", totalProfit / RUNS + 100);\n  return {\n    expectedPrice: totalProfit / (runs - failedRuns) + basePrice,\n    bestExpectedPrice: bestPossiblePrice / (runs - failedRuns),\n    allPrices,\n    isDecreasing: runs - failedRuns === decreasingRuns,\n  };\n}\n\nexport function makeHistogram(prices: number[], bucketSize: number) {\n  const counts: number[] = [];\n  for (let i = 0; i <= 700; i += bucketSize) counts[i / bucketSize] = 0;\n\n  prices.forEach((price) => {\n    const idx = Math.floor(price / bucketSize);\n    counts[idx]++;\n  });\n  counts.forEach((c, i) => (counts[i] = (c / prices.length) * 100));\n  return counts;\n}\n\n// const prices = simulateFromPrice([100, 100, 90, 85], 0);\n// const hist = histogram(prices);\n// console.log(hist.join(\"\\n\"));\n\n// console.log(possiblePatterns([98, 98, 59, 55, 51, 48, 44, 41, 38, 120, 154]));\n// simulation();\n// console.log(predictPattern0([100, 100]));\n\n// console.log(possiblePatterns([100]).csv.join(\"\\n\"));\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\n// https://www.d3-graph-gallery.com/graph/line_confidence_interval.html\n\ninterface Area {\n  x: number;\n  y0: number;\n  y1: number;\n}\ninterface Line {\n  x: number;\n  y: number;\n}\n\nexport interface ChartData {\n  lines: { data: Line[] }[];\n  areas: { opacity?: number; data: Area[] }[];\n  title: string;\n}\n\ninterface SelectedPoints {\n  allLines: Line[];\n  allAreas: Area[];\n  allPoints: (Line | Area)[];\n}\n\ninterface IProps {\n  data: ChartData;\n  options: {\n    yDomain: [number, number];\n    xDomain: [number, number];\n    yTickFormat?: any;\n    xTickFormat?: any;\n  };\n  calloutMessage?: { (selected: SelectedPoints): string };\n}\n\ninterface ChartElements {\n  svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n  dataArea: d3.Selection<SVGGElement, unknown, null, undefined>;\n  title: d3.Selection<SVGTextElement, unknown, null, undefined>;\n  x: d3.ScaleLinear<number, number>;\n  y: d3.ScaleLinear<number, number>;\n  areas: d3.Selection<SVGPathElement, Area[], null, undefined>[];\n  lines: d3.Selection<SVGPathElement, Line[], null, undefined>[];\n}\ntype GenericSelection = d3.Selection<any, any, any, any>;\n\nexport const Chart = (props: IProps) => {\n  const d3Container = useRef(null);\n\n  // set the dimensions and margins of the graph\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 },\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n  const [chartElements, setChartElements] = useState(\n    null as ChartElements | null\n  );\n\n  useEffect(() => {\n    if (chartElements?.svg) chartElements.svg.remove();\n\n    // append the svg object to the body of the page\n    const newSvg = d3\n      .select(d3Container.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    newSvg\n      .append(\"rect\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"fill\", \"rgba(0,0,0,0)\");\n\n    // Add X axis --> it is a date format\n    const x = d3\n      .scaleLinear()\n      .domain(props.options.xDomain)\n      .range([0, width]);\n    newSvg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x).tickFormat(props.options.xTickFormat));\n\n    // Add Y axis\n    const y = d3\n      .scaleLinear()\n      .domain(props.options.yDomain)\n      .range([height, 0]);\n    newSvg\n      .append(\"g\")\n      .call(d3.axisLeft(y).tickFormat(props.options.yTickFormat));\n\n    // add the title\n    const title = newSvg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0 + margin.top)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"16px\")\n      .text(props.data.title);\n\n    // add the hover callout\n    const bisect = (mouse: [number, number]): SelectedPoints => {\n      // mouse = [x,y] coordinates of the mouse\n\n      const allXvalues = new Set<number>();\n      props?.data?.areas?.forEach(item =>\n        item.data.forEach(point => allXvalues.add(point.x))\n      );\n      props?.data?.lines?.forEach(item =>\n        item.data.forEach(point => allXvalues.add(point.x))\n      );\n\n      let closestX = 0;\n      const xPos = x.invert(mouse[0]);\n      Array.from(allXvalues).forEach(xValue => {\n        if (closestX === 0) closestX = xValue;\n        if (Math.abs(xPos - xValue) < Math.abs(xPos - closestX))\n          closestX = xValue;\n      });\n\n      const allLines = [] as Line[];\n      const allAreas = [] as Area[];\n      props?.data?.areas?.forEach(item =>\n        item.data.forEach(point => point.x === closestX && allAreas.push(point))\n      );\n      props?.data?.lines?.forEach(item =>\n        item.data.forEach(point => point.x === closestX && allLines.push(point))\n      );\n\n      return {\n        allAreas,\n        allLines,\n        allPoints: [...allAreas, ...allLines]\n      };\n    };\n\n    const callout = (g: GenericSelection, value: string) => {\n      if (!value) return g.style(\"display\", \"none\");\n\n      g.style(\"display\", null)\n        .style(\"pointer-events\", \"none\")\n        .style(\"font\", \"10px sans-serif\");\n\n      const path = g\n        .selectAll(\"path\")\n        .data([null])\n        .join(\"path\")\n        .attr(\"fill\", \"white\")\n        .attr(\"stroke\", \"black\");\n\n      const text = g\n        .selectAll(\"text\")\n        .data([null])\n        .join(\"text\")\n        .call(text =>\n          text\n            .selectAll(\"tspan\")\n            .data((value + \"\").split(/\\n/))\n            .join(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", (d, i) => `${i * 1.1}em`)\n            .style(\"font-weight\", (_, i) => (i ? null : \"bold\"))\n            .text(d => d)\n        );\n\n      const { y, width: w, height: h } = (text as any).node().getBBox();\n\n      text.attr(\"transform\", `translate(${-w / 2},${-27 - y})`);\n      /*\n      m 185 189\n      h 62\n      l 5 5\n      l 5 -5\n      h 62\n      v -32\n      h -135\n      z\n\n      */\n      path.attr(\n        \"d\",\n        `M${-w / 2 - 10},-5H-5l5,5l5,-5H${w / 2 + 10}v-${h + 20}h-${w + 20}z`\n      );\n    };\n\n    const dataArea = newSvg.append(\"g\");\n\n    const tooltip = newSvg.append(\"g\");\n\n    newSvg.on(\"touchmove mousemove\", function() {\n      const mouse = d3.mouse(this);\n      const selectedPoints = bisect(mouse);\n      if (!selectedPoints.allPoints.length || !props.calloutMessage) return;\n\n      const xPos = selectedPoints.allPoints[0]?.x;\n      // const yPos = allLines[0]?.y;\n      // const yMax = Math.max(...(allAreas || []).map(p => p.y1));\n      // const yMin = Math.min(...(allAreas || []).map(p => p.y0));\n\n      // const text = `Max ${yMax}, Min ${yMin}, value ${yPos}`;\n\n      const text = props.calloutMessage(selectedPoints);\n\n      tooltip\n        .attr(\"transform\", `translate(${x(xPos)},${mouse[1]})`)\n        .call(callout, text);\n    });\n\n    newSvg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n\n    // persist everything\n    setChartElements({\n      ...chartElements,\n      svg: newSvg,\n      dataArea,\n      x,\n      y,\n      title,\n      areas: [],\n      lines: []\n    });\n  }, [props.options]);\n\n  useEffect(() => {\n    setChartElements(chartElements => {\n      if (!chartElements) return chartElements;\n\n      const { dataArea, x, y, areas, lines } = chartElements;\n      const newAreas: typeof areas = [];\n      const newLines: typeof lines = [];\n\n      props.data.areas.forEach((area, idx) => {\n        const elem = areas[idx] || dataArea.append(\"path\");\n        newAreas[idx] = elem;\n        elem\n          .datum(area.data)\n          .attr(\"fill\", \"#cce5df\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"opacity\", area.opacity !== undefined ? area.opacity : 1)\n          .attr(\n            \"d\",\n            d3\n              .area<Area>()\n              .x(d => x(d.x))\n              .y0(d => y(d.y0))\n              .y1(d => y(d.y1))\n          );\n      });\n\n      props.data.lines.forEach((line, idx) => {\n        const elem = lines[idx] || dataArea.append(\"path\");\n        newLines[idx] = elem;\n        elem\n          .datum(line.data)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"steelblue\")\n          .attr(\"stroke-width\", 1.5)\n          .attr(\n            \"d\",\n            d3\n              .line<Line>()\n              .x(d => x(d.x))\n              .y(d => y(d.y))\n          );\n      });\n\n      for (let i = newAreas.length; i < areas.length; i++) areas[i].remove();\n      for (let i = newLines.length; i < lines.length; i++) lines[i].remove();\n      return { ...chartElements, areas: newAreas, lines: newLines };\n    });\n  }, [props.data, chartElements?.svg]);\n\n  return (\n    <>\n      <svg\n        className=\"d3-component\"\n        width={400}\n        height={200}\n        ref={d3Container}\n      />\n    </>\n  );\n};\n\n// /* App */\n// export const MyApp = () => {\n//   return (\n//     <div className=\"my-app\">\n//       <MyD3Component data={[1, 2, 3]} />\n//     </div>\n//   );\n// };\n","interface StorageItem {\n  expiration: number;\n  value: any;\n}\n\ninterface DataStore {\n  [prop: string]: StorageItem;\n}\n\nlet memoryStore: DataStore = {};\n\nconst USE_LOCAL_STORE = typeof localStorage !== \"undefined\";\nconst LOCAL_STORE_KEY = \"MONETFE_DATA_STORE\";\nconst VALUE_EXPIRATION = 14 * 24 * 60 * 60 * 1000;\nconst EXPIRATION_CHECK_INTERVAL = 60 * 60 * 1000;\n\nlet lastExpirationCheck = 0;\nfunction checkForExpired() {\n  if (Date.now() < lastExpirationCheck + EXPIRATION_CHECK_INTERVAL) return;\n  const store = getStore();\n  Object.keys(store).forEach(key => {\n    if (store[key].expiration < Date.now()) delete store[key];\n  });\n  setStore(store);\n  lastExpirationCheck = Date.now();\n}\n\nfunction getStore(): DataStore {\n  if (USE_LOCAL_STORE) {\n    const dataStr = localStorage.getItem(LOCAL_STORE_KEY);\n    if (dataStr) return JSON.parse(dataStr);\n  }\n  return memoryStore;\n}\n\nfunction setStore(value: DataStore) {\n  memoryStore = value;\n  if (USE_LOCAL_STORE) {\n    localStorage.setItem(LOCAL_STORE_KEY, JSON.stringify(value));\n  }\n}\n\nfunction set(key: string, value: any, expiration = VALUE_EXPIRATION) {\n  const store = getStore();\n  store[key] = {\n    expiration: Date.now() + expiration,\n    value\n  };\n  setStore(store);\n  return value;\n}\n\nfunction get(key: string) {\n  const data = getStore()[key];\n  if (!data) return;\n  if (data.expiration < Date.now()) return clear(key);\n  return data.value;\n}\n\nfunction clear(key: string) {\n  const data = getStore();\n  delete data[key];\n  setStore(data);\n}\n\nexport { set, get, clear, checkForExpired };\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  possiblePatterns,\n  patternNames,\n  expectedPrice,\n  simulateFromPrice,\n  makeHistogram,\n} from \"./turnipCalculator\";\nimport { Chart, ChartData } from \"./Chart\";\nimport * as storageService from \"./storageService\";\n\nimport style from \"./Turnips.module.css\";\n\nconst DAYS = [\n  \"Sun AM: Buy\",\n  \"Sun PM\",\n  \"Mon AM\",\n  \"Mon PM\",\n  \"Tue AM\",\n  \"Tue PM\",\n  \"Wed AM\",\n  \"Wed PM\",\n  \"Thu AM\",\n  \"Thu PM\",\n  \"Fri AM\",\n  \"Fri PM\",\n  \"Sat AM\",\n  \"Sat PM\",\n];\n\nconst turnipPriceStore = storageService.get(\"turnipPriceStore\");\nlet simulationRun = 0;\n\nfunction cleanPrices(prices: number[]) {\n  while (prices?.length && !prices[prices.length - 1]) prices.pop();\n  return prices;\n}\ncleanPrices(turnipPriceStore?.prices);\n\nconst PriceForm = (props: {\n  onChange: { (price: number[], lastPattern: number): unknown };\n  currentPattern: number;\n}) => {\n  const [lastPattern, setLastPattern] = useState(\n    turnipPriceStore?.lastPattern !== undefined\n      ? turnipPriceStore.lastPattern\n      : 4\n  );\n  const [prices, setPrices] = useState<number[]>(\n    turnipPriceStore?.prices || [100, 100]\n  );\n  const changePrice = (day: number) => (e: { target: { value: string } }) => {\n    const newPrices = [...prices];\n    newPrices[day] = parseFloat(e.target.value);\n    if (day === 0) newPrices[1] = newPrices[0] || (undefined as any);\n    setPrices(newPrices);\n  };\n  const resetForm = () => {\n    if (\n      !window.confirm(\n        \"Are you sure you want to reset the calculator? This cannot be undone.\"\n      )\n    )\n      return;\n    setPrices([100, 100]);\n    setLastPattern(props.currentPattern);\n  };\n  useDebounce(() => {\n    storageService.set(\"turnipPriceStore\", { prices, lastPattern });\n    props.onChange(prices, lastPattern);\n  }, 1000);\n  return (\n    <>\n      <div>\n        Last week's pattern:{\" \"}\n        <select\n          onChange={(e) => setLastPattern(parseInt(e.target.value))}\n          className={style.patternSelect}\n        >\n          {patternNames.map((name, idx) => (\n            <option selected={idx === lastPattern} value={idx}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className={style.priceTable}>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[0] || \"\"}\n            onChange={changePrice(0)}\n          />\n          <div className={style.dayName}>Buy Price</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[2] || \"\"}\n            onChange={changePrice(2)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[3] || \"\"}\n            onChange={changePrice(3)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Monday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[4] || \"\"}\n            onChange={changePrice(4)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[5] || \"\"}\n            onChange={changePrice(5)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Tuesday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[6] || \"\"}\n            onChange={changePrice(6)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[7] || \"\"}\n            onChange={changePrice(7)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Wednesday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[8] || \"\"}\n            onChange={changePrice(8)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[9] || \"\"}\n            onChange={changePrice(9)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Thursday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[10] || \"\"}\n            onChange={changePrice(10)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[11] || \"\"}\n            onChange={changePrice(11)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Friday</div>\n        </span>\n        <span className={style.formDay}>\n          <input\n            type=\"number\"\n            value={prices[12] || \"\"}\n            onChange={changePrice(12)}\n            placeholder=\"AM\"\n          />\n          <input\n            type=\"number\"\n            value={prices[13] || \"\"}\n            onChange={changePrice(13)}\n            placeholder=\"PM\"\n          />\n          <div className={style.dayName}>Saturday</div>\n        </span>\n        {prices.length > 2 ? (\n          <span className={style.resetForm} onClick={resetForm}>\n            Reset Calculater\n          </span>\n        ) : null}\n      </div>\n      <div className={style.instructions}>\n        Enter all values from your own island even if you purchased on a\n        different island.\n      </div>\n    </>\n  );\n};\n\nfunction useDebounceFn(func: { (): unknown }, delay: number, deps: any[]) {\n  const [data] = useState({ id: (0 as unknown) as NodeJS.Timeout });\n\n  useEffect(() => {\n    clearTimeout(data.id);\n    data.id = setTimeout(() => {\n      func();\n    }, delay);\n  }, [...deps]);\n}\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value]);\n  return debouncedValue;\n}\n\ninterface SimulationResult {\n  histogram: number[];\n  expected: number;\n  high: number;\n  low: number;\n  bucketSize: number;\n}\n\nexport const Turnips = () => {\n  // [\n  //   \"Random\",\n  //   \"Large Spike\",\n  //   \"Decreasing\",\n  //   \"Small Spike\"\n  // ];\n  const [lastPattern, setLastPattern] = useState(4);\n  const [prices, setPrices] = useState<number[]>([]);\n  // const prices = [98, 98]; // , 59, 55, 51, 48, 44, 41, 38, 120, 117, 154\n  const [simulated, setSimulated] = useState<SimulationResult | null>(null);\n\n  let currentDay = 0;\n  let currentPrice = 0;\n  prices.forEach((p, i) => {\n    if (p) {\n      currentDay = i;\n      currentPrice = p;\n    }\n  });\n  const { patterns } = possiblePatterns(prices, lastPattern);\n\n  let currentPattern = patterns.reduce((last, p) => {\n    if (last === 5) return p.type;\n    if (p.type === last) return p.type;\n    return 4;\n  }, 5);\n  if (currentPattern === 5) currentPattern = 4;\n\n  const expected = expectedPrice(patterns, currentDay + 1);\n  const isDecreasing = patterns.every(\n    (p) => p.decreasingStart <= currentDay + 1\n  );\n\n  // if (patterns.length > 1) {\n  //   const masterPattern = cloneDeep(patterns[0]);\n  //   patterns.forEach(pattern => {\n  //     pattern.forEach((val, i) => {\n  //       if (masterPattern[i].high < val.high) masterPattern[i].high = val.high;\n  //       if (masterPattern[i].low > val.low) masterPattern[i].low = val.low;\n  //     });\n  //   });\n  //   patterns.unshift(masterPattern);\n  // }\n\n  const charts: ChartData[] = patterns.map((pattern) => {\n    const area = pattern.dailyPriceRange.map((p, i) => ({\n      x: i,\n      y0: p.low as number,\n      y1: p.high as number,\n    }));\n    return {\n      lines: [\n        {\n          data: pattern.dailyPriceRange.map((p, i) => ({\n            x: i,\n            y: prices[i],\n          })),\n        },\n      ],\n      areas: [{ data: area, opacity: pattern.probability * 4 }],\n      title: `${patternNames[pattern.type]} (${\n        Math.round(pattern.probability * 1000) / 10\n      }%)`,\n    };\n  });\n\n  if (patterns.length > 1) {\n    const masterChart: ChartData = {\n      lines: [\n        {\n          data: patterns[0].dailyPriceRange.map((p, i) => ({\n            x: i,\n            y: prices[i],\n          })),\n        },\n      ],\n      areas: charts.map((c) => c.areas[0]),\n      title: \"All Possible Prices\",\n    };\n    charts.forEach(\n      (chart) => (chart.areas[0] = { ...chart.areas[0], opacity: 1 })\n    );\n    charts.unshift(masterChart);\n  }\n\n  const simulate = async (iterations = 10) => {\n    const currentRun = ++simulationRun;\n    // console.log(\"simulate=================\", prices, lastPattern);\n    if (!charts.length) return;\n    if (!prices.filter(Boolean).length) return;\n    let expectedPrice = 0;\n    let allPrices = [] as number[];\n    for (let i = 0; i <= iterations; i++) {\n      const res = simulateFromPrice(prices, lastPattern, 100);\n      // console.log({ ...res, allPrices: null });\n      expectedPrice += res.expectedPrice * res.allPrices.length;\n      allPrices.push(...res.allPrices);\n      await new Promise((r) => setTimeout(r, 100));\n\n      if (currentRun !== simulationRun) return;\n      if (i && i % 10 === 0) {\n        let bucketSize = 10;\n        if (allPrices.length > 5000) bucketSize = 5;\n        let histogram = makeHistogram(allPrices, bucketSize);\n        // if (allPrices.length > 5000) histogram = histogram.map((p) => p * 2);\n        setSimulated({\n          histogram,\n          expected: expectedPrice / allPrices.length,\n          low: Math.min(...allPrices),\n          high: Math.max(...allPrices),\n          bucketSize,\n        });\n        console.log(\"simulations ran: \", allPrices.length);\n      }\n    }\n  };\n  useEffect(\n    () =>\n      setSimulated({\n        ...(simulated as SimulationResult),\n        expected: 0,\n        high: 0,\n        low: 0,\n      }),\n    [prices, lastPattern]\n  );\n  useDebounceFn(simulate, 1000, [prices, lastPattern]);\n\n  return (\n    <>\n      <h1>Animal Crossing New Horizons Turnip Price Calculator</h1>\n      <PriceForm\n        onChange={(prices, pattern) => {\n          setPrices(prices);\n          setLastPattern(pattern);\n        }}\n        currentPattern={currentPattern}\n      />\n      {charts.length === 0 ? (\n        <div className={style.recommendation}>\n          This scenario doesn't seem possible. Is there a mistake in the prices?\n        </div>\n      ) : (\n        <>\n          {currentDay === 0 ? (\n            <div className={style.recommendation}>\n              Enter the buy price for turnips on your island.\n            </div>\n          ) : currentDay === 14 ? (\n            <div className={style.recommendation}>\n              End of the week. You should sell now or your turnips will spoil.\n            </div>\n          ) : isDecreasing ? (\n            <div className={style.recommendation}>\n              Sell Now!! Prices will only decrease from here.\n            </div>\n          ) : (\n            <div\n              className={style.recommendation}\n              style={{ opacity: simulated?.expected ? 1 : 0.5 }}\n            >\n              {(simulated?.expected || expected.expected) > currentPrice\n                ? `Recommendation is to hold. `\n                : `Sell Now!! `}\n              Prices are expected to be{\" \"}\n              <b>{Math.round(simulated?.expected || expected.expected)}</b> in\n              the future with a low of{\" \"}\n              <span style={{ color: \"red\" }}>\n                {Math.min(expected.low, simulated?.low || 999)}\n              </span>{\" \"}\n              and a high of{\" \"}\n              <span style={{ color: \"green\" }}>\n                {Math.max(expected.high, simulated?.high || 0)}\n              </span>\n              .\n            </div>\n          )}\n          <span /* onClick={() => simulate(50)} */>\n            <Chart\n              data={{\n                lines: [\n                  {\n                    data:\n                      simulated?.histogram?.map((y, i) => ({\n                        x: i * simulated.bucketSize,\n                        y,\n                      })) || [],\n                  },\n                ],\n                areas: [],\n                title: \"Probability\",\n              }}\n              options={{\n                xDomain: [0, 600], //histDomain.x,\n                yDomain: [0, 25], //histDomain.y,\n                yTickFormat: (a: any) => `${a}%`,\n              }}\n              calloutMessage={(selectedPoints) => {\n                const x = selectedPoints.allLines[0].x;\n                const y = selectedPoints.allLines[0].y;\n                // const day = DAYS[x];\n                // const yPos = allLines[0]?.y;\n                // const yMax = Math.max(...(allAreas || []).map(p => p.y1));\n                // const yMin = Math.min(...(allAreas || []).map(p => p.y0));\n\n                return `Price ${x} expected ${Math.round(y * 10) / 10}%`;\n              }}\n            />\n          </span>\n          {charts.map((chart, idx) => {\n            return (\n              <Chart\n                key={`${idx}-${JSON.stringify(chart)}`}\n                data={chart}\n                options={{\n                  yDomain: [0, 600],\n                  xDomain: [0, 14],\n                  xTickFormat: (d: number) =>\n                    [\n                      \"Buy\",\n                      \"\",\n                      \"Mon\",\n                      \"\",\n                      \"Tue\",\n                      \"\",\n                      \"Wed\",\n                      \"\",\n                      \"Thu\",\n                      \"\",\n                      \"Fri\",\n                      \"\",\n                      \"Sat\",\n                      \"\",\n                    ][d as number],\n                }}\n                calloutMessage={(selectedPoints) => {\n                  const x = selectedPoints.allLines[0].x;\n                  const day = DAYS[x];\n                  const yMax = Math.max(\n                    ...(selectedPoints.allAreas || []).map((p) => p.y1)\n                  );\n                  const yMin = Math.min(\n                    ...(selectedPoints.allAreas || []).map((p) => p.y0)\n                  );\n\n                  return `${day} price ${yMin} - ${yMax}`;\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Turnips } from \"./Turnips\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Turnips />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}